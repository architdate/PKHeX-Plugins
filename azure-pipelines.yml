# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- powershell: |
    git clone -q --depth=5 --branch=master https://github.com/kwsch/PKHeX.git $(Build.SourcesDirectory)/PKHeX

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(Build.SourcesDirectory)/PKHeX/PKHeX.sln'

- task: VSBuild@1
  inputs:
    solution: '$(Build.SourcesDirectory)/PKHeX/PKHeX.sln'
    platform: '$(buildPlatform)'
    configuration: 'Release'
    restoreNugetPackages: true
    createLogFile: true

- powershell: |
    $nugetver = (Get-ChildItem "$(UserProfile)/.nuget/packages/pkhex.core" | Sort-Object -Property LastWriteTime -Descending)[0].Name
    Copy-Item "$(Build.SourcesDirectory)\pkhex\PKHeX.Core\bin\Release\net46\PKHeX.Core.dll" "$(UserProfile)\.nuget\packages\pkhex.core\$nugetver\lib\net46"
    Copy-Item "$(Build.SourcesDirectory)\pkhex\PKHeX.Core\bin\Release\netstandard2.0\PKHeX.Core.dll" "$(UserProfile)\.nuget\packages\pkhex.core\$nugetver\lib\netstandard2.0"

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    createLogFile: true

- task: CmdLine@2
  inputs:
    script: |
      mkdir bin
      nuget install ILMerge -ExcludeVersion
      cd ILMerge\tools\net452
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\AutoModPlugins.dll .\
      xcopy ..\..\..\QRPlugins\bin\Release\net46\BouncyCastle.CryptoExt.dll .\
      xcopy ..\..\..\QRPlugins\bin\Release\net46\zxing.dll .\
      xcopy ..\..\..\QRPlugins\bin\Release\net46\zxing.presentation.dll .\
      xcopy ..\..\..\QRPlugins\bin\Release\net46\QRCoder.dll .\
      xcopy ..\..\..\QRPlugins\bin\Release\net46\QRPlugins.dll .\
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\PKHeX.Core.AutoMod.dll .\
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\PKHeX.Core.Enhancements.dll .\
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\PKHeX.Core.Injection.dll .\
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\PKHeX.Core.dll .\
      xcopy ..\..\..\AutoLegalityMod\bin\Release\net46\LibUsbDotNet.LibUsbDotNet.dll .\
      ilmerge /targetplatform:v4,"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6" /out:$(Agent.BuildDirectory)\s\bin\AutoModPlugins.dll AutoModPlugins.dll PKHeX.Core.AutoMod.dll LibUsbDotNet.LibUsbDotNet.dll PKHeX.Core.Enhancements.dll PKHeX.Core.Injection.dll
      ilmerge /targetplatform:v4,"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6" /out:$(Agent.BuildDirectory)\s\bin\QRPlugins.dll QRPlugins.dll PKHeX.Core.AutoMod.dll BouncyCastle.CryptoExt.dll QRCoder.dll zxing.dll zxing.presentation.dll

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      cd "C:\Users"
      echo $(ls)
      
      cd $(Agent.BuildDirectory)
      echo $(Agent.BuildDirectory)
      
      cd $(Build.SourcesDirectory)
      echo $(Build.SourcesDirectory)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Agent.BuildDirectory)\s\bin'
    ArtifactName: 'PKHeX-Plugins'
    publishLocation: 'Container'
